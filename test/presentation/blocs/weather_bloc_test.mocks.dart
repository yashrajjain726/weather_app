// Mocks generated by Mockito 5.4.2 from annotations
// in weather_app/test/presentation/blocs/weather_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:geolocator/geolocator.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/errors/failures.dart' as _i6;
import 'package:weather_app/core/params/fetch_location.dart' as _i9;
import 'package:weather_app/features/domain/entities/weather.dart' as _i7;
import 'package:weather_app/features/domain/repositories/weather_repository.dart'
    as _i2;
import 'package:weather_app/features/domain/usecases/get_weather_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepository_0 extends _i1.SmartFake
    implements _i2.WeatherRepository {
  _FakeWeatherRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherUseCase extends _i1.Mock implements _i4.GetWeatherUseCase {
  MockGetWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get weatherRepository => (super.noSuchMethod(
        Invocation.getter(#weatherRepository),
        returnValue: _FakeWeatherRepository_0(
          this,
          Invocation.getter(#weatherRepository),
        ),
      ) as _i2.WeatherRepository);

  @override
  set weatherRepository(_i2.WeatherRepository? _weatherRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #weatherRepository,
          _weatherRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Weather>> call(
          _i8.Position? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [position],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Weather>>.value(
            _FakeEither_1<_i6.Failure, _i7.Weather>(
          this,
          Invocation.method(
            #call,
            [position],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Weather>>);
}

/// A class which mocks [FetchLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchLocation extends _i1.Mock implements _i9.FetchLocation {
  MockFetchLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.Position>> getLocationAddress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationAddress,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i8.Position>>.value(
            _FakeEither_1<_i6.Failure, _i8.Position>(
          this,
          Invocation.method(
            #getLocationAddress,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i8.Position>>);

  @override
  _i5.Future<String> getAddressFromLatLong(_i8.Position? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromLatLong,
          [position],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
}
